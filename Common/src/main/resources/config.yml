# How the plugin stores long-term data
storage:
  # The storage method
  #
  # Options:
  # - MySQL (remote)
  # - SQLite (local)
  method: 'sqlite'

  data:
    # Address and port of the remote database (if applicable)
    address: '127.0.0.1:3306'
    # The name of the database Anti-VPN will store data in
    # If you're using remote options, this must be created beforehand
    database: 'avpn'
    # Table prefix for all Anti-VPN tables
    prefix: 'antivpn_'
    # Database credentials (if applicable)
    username: ''
    password: ''
    # Whether or not to use SSL
    ssl: false

    # MongoDB options- obviously don't need to worry about these if not using MongoDB ;)
    mongodb:
      # Connection prefix for all Anti-VPN connections
      collection-prefix: ''
      # MongoDB ClientConnectionURI
      connection-uri: ''

  settings:
    # The maximum size of the database connection pool
    # Determines the max number of connections to the database
    max-pool-size: 2
    # The minimum size of the satabase connection pool
    # Determines the min number of connections kept alive to the database
    min-idle: 2
    # The maximum lifetime of a connection in the pool
    # Should be at least 30 seconds less than any database or infrastructure-imposed connection time limit
    max-lifetime: 1800000 # 30 minutes
    # The maximum number of milliseconds that the plugin will wait for a new connection from the pool before timing out
    timeout: 5000 # 5 seconds

    # Extra connection properties
    properties:
      unicode: true
      encoding: 'utf8'

# Redis is a very fast cache accessible by multiple servers
# If you don't want to constantly hit your database for queries, try enabling and configuring this
# You will need to install the (external) Redis server software if you haven't already
# https://redis.io/
redis:
  enabled: false
  # Address and port of the remote Redis server
  address: '127.0.0.1:6379'
  # Redis credentials
  password: ''

# RabbitMQ is a messaging queue that will allow the plugin to push instant updates across multiple servers
# You will need to install the (external) RabbitMQ server software if you haven't already
# https://www.rabbitmq.com/
rabbitmq:
  enabled: false
  # Address and port of the remote RabbitMQ server
  address: '127.0.0.1:5672'
  # RabbitMQ credentials
  username: 'guest'
  password: 'guest'

# Where VPN-checking sources are defined
# Beware the more sources that are included (and fail) the worse the performance and the more the lag
sources:
  # The amount of time to globally cache results across all sources
  # This should be as high as possible to avoid rate-limits but as low as possible to ensure results are always up-to-date and accurate
  cacheTime: '6hours'

  # The order to try results in
  order:
  - 'iphub'
  - 'proxycheck'
  - 'getipintel'
  - 'ipqualityscore'
  - 'vpnblocker'
  - 'voxprox'
  - 'shodan'
  - 'ipwarner'

  # https://iphub.info/
  # Results updated Sep 6, 2018
  # Error rate: 0%
  # NordVPN detection rate: 90.48%
  # Cryptostorm detection rate: 90%
  # False-flagged homes: 20%
  iphub:
    enabled: false
    # API key to use (Required for this service, free one available at https://iphub.info/apiKey/newFree )
    key: ''
    # The block type at which an IP is considered "bad"
    block: 1

  # https://proxycheck.io
  # Results updated Sep 6, 2018
  # Error rate: 5%
  # NordVPN detection rate: 85.71%
  # Cryptostorm detection rate: 94.74%
  # False-flagged homes: 10%
  proxycheck:
    enabled: true
    # Optional API key to use
    key: ''

  # https://www.getipintel.net/
  # Results updated Sep 6, 2018
  # Error rate: 5%
  # NordVPN detection rate: 90.48%
  # Cryptostorm detection rate: 100%
  # False-flagged homes: 40%
  getipintel:
    enabled: true
    # Contact e-mail in case things go wrong. Required
    contact: 'admin@yoursite.com'
    # Threshold above which an IP is considered "bad"
    threshold: 0.98

  # https://www.ipqualityscore.com/
  # Results updated Sep 6, 2018
  # Error rate: 0%
  # NordVPN detection rate: 90.48%
  # Cryptostorm detection rate: 85%
  # False-flagged homes: 40%
  ipqualityscore:
    enabled: false
    # API key to use (Required for this service, free one available at https://www.ipqualityscore.com/create-account )
    key: ''
    # Threshold above which an IP is considered "bad"
    threshold: 0.65

  # https://vpnblocker.net/usage
  # Error rate: 0%
  # NordVPN detection rate: 66.67%
  # Cryptostorm detection rate: 70%
  # False-flagged homes: 10%
  vpnblocker:
    enabled: true
    # Optional API key to use
    key: ''

  # https://www.voxprox.com
  # Error rate: 0%
  # NordVPN detection rate: 66.67%
  # Cryptostorm detection rate: 70%
  # False-flagged homes: 40%
  voxprox:
    enabled: false
    # API key to use (Required for this service)
    key: ''

  # https://www.shodan.io/
  # Error rate: 94.52%
  # NordVPN detection rate: 89.47%
  # Cryptostorm detection rate: 0%
  # False-flagged homes: 0%
  shodan:
    enabled: false
    # API key to use (Required for this service)
    key: ''

  # https://ipwarner.com/
  ipwarner:
    enabled: false
    # API key to use (Required for this service, free one available at https://ipwarner.com/register )
    key: ''

action:
  # The kick message to display to players who are using VPNs
  # If left blank, will not kick the player
  kick-message: '&cPlease disconnect from your proxy or VPN before re-joining!'
  # The command that CONSOLE will run for players who are using VPNs
  # Use %player% as a placeholder for the player's (real) name
  # Use %uuid% as a placeholder for the player's uuid
  # If left blank, will not run anything
  command: ''

  algorithm:
    # The algorithm method
    #
    # Options:
    # - Cascade
    #   The plugin will go down the "sources" list, sequentially, until a valid source is found
    #   It will then query that source and return the result
    #   This will result in essentially "the first valid result" being returned
    # - Consensus
    #   The plugin will try every source in the "sources" list at once
    #   It will then strip invalid results, and calculate the ratio of results from the remaining sources
    #   This will result in essentially "the ratio of valid results" being returned
    method: 'cascade'

    # Only used for "consensus" mode
    # The minimum ratio of APIs that must agree before a player is kicked
    # For example, if set to "0.6" then at least 60% of sources must agree that the IP is a VPN
    # The value can range from 0 to 1, and will be clipped at those values
    min-consensus: 0.6

  # IPs to ignore when checking for VPNs
  ignore:
  - '127.0.0.1'
  - 'localhost'
  - '::1'

# The amount of time to cache lookups in-memory
# Higher values require more memory
# Lower values will hit Redis/SQL/APIs more frequently
# Generally the default is good enough to prevent many sequential lookups from choking resources, but still keep memory usage low
cacheTime: '1minute'
# When true, logs some extra output to the console so you can see if/why things might be failing
debug: false
# The number of threads to use for web operations
threads: 4

stats:
  # Whether or not to send anonymous usage statistics to bStats
  # True: Send anonymous stats; let the author know how well the plugin is doing and how it's used!
  # False: Do not send stats and make the author sad :(
  usage: true
  # Whether or not to send anonymous errors to the author
  # True: Send errors anonymously to Rollbar and/or GameAnalytics so the author can fix them!
  # False: Do not send errors and wonder why any bugs you encounter haven't beeen fixed
  errors: true

update:
  # Whether or not to automatically check for updates and notify the console if found
  check: true
  # Whether or not to notify players with the avpn.admin permission node
  notify: true

# Config version, no touchy plz
version: 3.7